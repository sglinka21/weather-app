{"version":3,"sources":["components/SearchFrom.js","components/WeatherItem.js","components/Spinner/Spinner.js","components/WeatherList.js","components/UI/Modal/Modal.js","components/WeatherDetails.js","App.js","serviceWorker.js","index.js"],"names":["SearchFrom","state","city","handleChange","event","_this","setState","target","value","handleSubmit","preventDefault","props","addCity","react_default","a","createElement","className","onSubmit","this","htmlFor","type","id","onChange","Component","WeatherItem","_ref","weather","Spinner","class","WeatherList","weathers","isLoading","weatherList","components_Spinner_Spinner","map","src_components_WeatherItem","key","Modal","children","WeatherDetails","App","day","temp","windSpeed","humidity","UI_Modal_Modal","src_components_WeatherDetails","components_SearchFrom","components_WeatherList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e41f3e6.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport '../components/SearchForm.css'\r\n\r\nclass SearchFrom extends Component{\r\n    state = {\r\n        city: ''\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            city: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.addCity(this.state.city);\r\n        this.setState({\r\n            city: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container search-box\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m8 l8 offset-l2 offset-m2\">\r\n                        <div className=\"card z-depth-3\">\r\n                            <div className=\"card-content\">\r\n                                <form className=\"container\" onSubmit={this.handleSubmit}>\r\n                                    <div className=\"input-field\">\r\n                                        <label htmlFor=\"city\">City</label>\r\n                                        <input type=\"text\" className=\"input-field\" id=\"city\" value={this.state.city} onChange={this.handleChange} />\r\n                                    </div>\r\n                                    <div className=\"input-field\">\r\n                                        <button className=\"btn blue\">Search</button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchFrom\r\n","import React from 'react'\r\nimport './WeatherItem.css'\r\nimport 'weathericons/css/weather-icons.css';\r\n\r\nconst WeatherItem = ({weather}) => {\r\n    return (\r\n        <div className=\"col s12 m6 l3\">\r\n            <div className=\"weather-card rain hoverable\">\r\n                <div className=\"day-name\">Tue</div>\r\n                <div className=\"weather-icon\">\r\n                    <i className=\"wi wi-day-lightning\"></i>\r\n                </div>\r\n                <div className=\"weather-day-temp\">30<span className=\"units\">&#176;C</span></div>\r\n                <div className=\"weather-details\">\r\n                    <div className=\"weather-humidity\">\r\n                        <i className=\"wi wi-raindrop\"></i>\r\n                        15 %\r\n                    </div>\r\n                    <div className=\"weather-windspeed\">\r\n                        <i className=\"wi wi-small-craft-advisory\"></i>\r\n                        30 <span className=\"units\">km/h</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        /* <div className=\"col s12 m6 l3\">\r\n            <div className=\"card small hoverable blue lighten-3\">\r\n                <div className=\"card-title white-text\">\r\n                <span>{weather.day}</span>\r\n            </div>\r\n            <div className=\"card-content blue lighten-5\">\r\n                <img src=\"http://openweathermap.org/img/w/10d.png\" style={style}  alt=\"\" />\r\n            </div>\r\n            <div className=\"card-action\">\r\n                <p>Temp: {weather.temp}&#8451;</p>\r\n                <p>Wind speed: {weather.windSpeed} km/h</p>\r\n                <p>Humidity: {weather.humidity}%</p>\r\n            </div>\r\n            </div>\r\n        </div> */\r\n  )\r\n}\r\n\r\nexport default WeatherItem\r\n","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div>\r\n            <div class=\"loader\">Loading...</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Spinner from './Spinner/Spinner';\r\n\r\nconst WeatherList = ({weathers, isLoading}) => {\r\n    let weatherList = <Spinner />;\r\n    if(isLoading) {\r\n        weatherList = weathers.map(weather => {\r\n            return (\r\n                <WeatherItem\r\n                    weather={weather}\r\n                    key={weather.id} />\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {weatherList}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherList\r\n","import React from 'react'\r\nimport '../Modal/Modal.css'\r\n\r\nconst Modal = (props) => {\r\n  return (\r\n    <div className=\"Modal blue lighten-4\">\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n","import React from 'react'\r\nimport './WeatherDetails.css'\r\n\r\nconst WeatherDetails = (props) => {\r\n  return (\r\n    <div className=\"weather-details\">\r\n        <div className=\"weather-day\">\r\n            <div className=\"weather-day-temp\">\r\n                30\r\n            </div>\r\n            <div className=\"weather-day-icon\"></div>\r\n        </div>\r\n        <div className=\"weather-hour\">\r\n            <div className=\"weather-hour-title\">10:00</div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherDetails","import React, { Component } from 'react';\nimport './App.css';\nimport SearchForm from './components/SearchFrom';\nimport WeatherList from './components/WeatherList';\nimport Modal from './components/UI/Modal/Modal';\nimport WeatherDetails from './components/WeatherDetails';\n\nclass App extends Component {\n  state = {\n    city: '',\n    weather: [\n      { id: 1, day: '10/10/2018', temp: 30, windSpeed: 30, humidity: 20 },\n      { id: 2, day: '11/10/2018', temp: 31, windSpeed: 20, humidity: 50 },\n      { id: 3, day: '12/10/2018', temp: 32, windSpeed: 10, humidity: 10 },\n      { id: 4, day: '13/10/2018', temp: 31, windSpeed: 34, humidity: 25 }\n    ],\n    isLoading: true\n  }\n\n  addCity = (city) => {\n    this.setState({\n      city\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <Modal>\n            <WeatherDetails />\n          </Modal>\n          <SearchForm\n            addCity={this.addCity}\n          />\n          <WeatherList\n            weathers={this.state.weather}\n            isLoading={this.state.isLoading}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}